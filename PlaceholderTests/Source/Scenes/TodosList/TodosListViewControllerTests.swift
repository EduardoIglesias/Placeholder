//
//  TodosListViewControllerTests.swift
//  Placeholder
//
//  Created by Eduardo Iglesias Fern√°ndez on 14/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Placeholder
import XCTest

class TodosListViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: TodosListViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupTodosListViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupTodosListViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: Constants.Storyboards.TodosList , bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: Constants.ViewControllers.TodosList) as? TodosListViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
    class TodosListBusinessLogicSpy: TodosListBusinessLogic {
        var getNavBarDataCalled = false
        var getNoDataTextCalled = false
        var fetchTodosCalled = false
        var getCreatePopUpTextCalled = false
        var getCreateTodoCalled = false
        var getDeletePopUpTextCalled = false
        var getDeleteTodoCalled = false
        var getUpdatePopUpTextCalled = false
        var getUpdateTodoCalled = false
        var getCheckPopUpTextCalled = false
        var getCheckTodoCalled = false
        
        func getNavBarData(_ request: TodosList.UpdateNavBar.Request) {
            getNavBarDataCalled = true
        }
        
        func getNoDataText(_ request: TodosList.SetText.Request) {
            getNoDataTextCalled = true
        }
        
        func fetchTodos(_ request: TodosList.FetchTodos.Request) {
            fetchTodosCalled = true
        }
        
        func getCreatePopUpText(_ request: TodosList.LaunchCreatePopup.Request) {
            getCreatePopUpTextCalled = true
        }
        
        func getCreateTodo(_ request: TodosList.CreateTodo.Request) {
            getCreateTodoCalled = true
        }
        
        func getDeletePopUpText(_ request: TodosList.LaunchDeletePopup.Request) {
            getDeletePopUpTextCalled = true
        }
        
        func getDeleteTodo(_ request: TodosList.DeleteTodo.Request) {
            getDeleteTodoCalled = true
        }
        
        func getUpdatePopUpText(_ request: TodosList.LaunchUpdatePopup.Request) {
            getUpdatePopUpTextCalled = true
        }
        
        func getUpdateTodo(_ request: TodosList.UpdateTodo.Request) {
            getUpdateTodoCalled = true
        }
        
        func getCheckPopUpText(_ request: TodosList.LaunchCheckPopup.Request) {
            getCheckPopUpTextCalled = true
        }
        
        func getCheckTodo(_ request: TodosList.CheckTodo.Request) {
            getCheckTodoCalled = true
        }
  }
  
  // MARK: Tests
  
  func testShouldSetBackgroundColorWhenViewIsLoaded() {
    // Given
    let spy = TodosListBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertEqual(sut.view.backgroundColor, UIColor.lightgrey, "backgroundColor textColor should be lightgrey")
    
  }
    
    func testLaunchCreatePopUp() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        sut.launchCreatePopUp()
        
        // Then
        XCTAssert(spy.getCreatePopUpTextCalled, "launchCreatePopUp() should ask the interactor to get some result")
    }
    
    func testCreateTodoAction() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        sut.createTodoAction()
        
        // Then
        XCTAssert(spy.getCreateTodoCalled, "createTodoAction() should ask the interactor to get some result")
    }
    
    func testDeleteTodoAction() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        sut.todoList.append(Seeds.Todos.todoTest)
        sut.todoIndex = 0
        
        // When
        loadView()
        sut.deleteTodoAction()
        
        // Then
        XCTAssert(spy.getDeleteTodoCalled, "deleteTodoAction() should ask the interactor to get some result")
    }
    
    func testUpdateTodoAction() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        sut.todoList.append(Seeds.Todos.todoTest)
        sut.todoIndex = 0
        
        // When
        loadView()
        sut.updateTodoAction()
        
        // Then
        XCTAssert(spy.getUpdateTodoCalled, "updateTodoAction() should ask the interactor to get some result")
    }
    
    func testCheckTodoAction() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        sut.todoList.append(Seeds.Todos.todoTest)
        sut.todoIndex = 0
        
        // When
        loadView()
        sut.checkTodoAction()
        
        // Then
        XCTAssert(spy.getCheckTodoCalled, "checkTodoAction() should ask the interactor to get some result")
    }
    
    func testDisplayNavBarData() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        let viewModel = TodosList.UpdateNavBar.ViewModel(navData: Seeds.NavBarDatas.navBarDataTest)
        
        // When
        loadView()
        sut.displayNavBarData(viewModel)
        
        // Then
        XCTAssertEqual(sut.customNV.titleLabel.text, "TitleTest", "displayNavBarData(viewModel:) should update the titleLabel text in nav bar")
        XCTAssertEqual(sut.customNV.backTitleLabel.text, "backTest", "displayNavBarData(viewModel:) should update the name text in nav bar")
        XCTAssertEqual(sut.customNV.iconImage.image, UIImage(named: Constants.ImageNames.UserIcon), "displayNavBarData(viewModel:) should update the iconImage image in nav bar")
        XCTAssertEqual(sut.customNV.rightButton.imageView?.image, UIImage(named: Constants.ImageNames.CloseIcon), "displayNavBarData(viewModel:) should update the rightButton image in nav bar")
    }
    
    func testDisplayNoDataText() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        let viewModel = TodosList.SetText.ViewModel(noDataText: "noDataTextTest")
        
        // When
        loadView()
        sut.displayNoDataText(viewModel)
        
        // Then
        XCTAssertEqual(sut.noTodosLabel.text, "noDataTextTest", "displayNoDataText(viewModel:) should update the noUsersLabel text in user list view")
    }
    
    func testDisplayFetchedTodos() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        var todosListTest: [Todo] = []
        todosListTest.append(Seeds.Todos.todoTest)
        
        let viewModel = TodosList.FetchTodos.ViewModel(todos: todosListTest, popupTitle: "popupTitleTest", popupMessage: "popupMessageTest", popupCancelText: "popupCancelTextTest")
        
        // When
        loadView()
        sut.displayFetchedTodos(viewModel)
        
        // Then
        XCTAssertEqual(sut.todosTableView.isHidden, false, "displayFetchedTodos(viewModel:) should set the todosTableView isHidden true in  user list view")
        
    }
    
    func testTableViewDidSelectRowAt() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        var userListTest: [Todo] = []
        userListTest.append(Seeds.Todos.todoTest)
        
        // When
        loadView()
        sut.tableView(sut.todosTableView, didSelectRowAt: IndexPath(row: 0, section: 0))
        
        // Then
        XCTAssertTrue(spy.getUpdatePopUpTextCalled, "tableView(didSelectRowAt:) should ask the interactor to set the UpdatePopUp text")
        
    }
    
    func testDeleteButtonClicked() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        sut.deleteButtonClicked(sender: UIButton())
        
        // Then
        XCTAssertTrue(spy.getDeletePopUpTextCalled, "deleteButtonClicked(sender:) should ask the interactor to set the UpdatePopUp text")
        
    }
    
    func testCheckboxButtonClicked() {
        // Given
        let spy = TodosListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        sut.checkboxButtonClicked(sender: UIButton())
        
        // Then
        XCTAssertTrue(spy.getCheckPopUpTextCalled, "checkboxButtonClicked(sender:) should ask the interactor to set the UpdatePopUp text")
        
    }
}
