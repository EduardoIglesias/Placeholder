//
//  UsersListInteractorTests.swift
//  Placeholder
//
//  Created by Eduardo Iglesias Fern√°ndez on 14/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Placeholder
import XCTest

class UsersListInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: UsersListInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupUsersListInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupUsersListInteractor()
    {
        sut = UsersListInteractor()
    }
    
    // MARK: Test doubles
    
    class UsersListPresentationLogicSpy: UsersListPresentationLogic {
        var presentNavBarDataCalled = false
        var presentNoDataTextCalled = false
        var presentFetchedUsersCalled = false
        
        func presentNavBarData(_ response: UsersList.UpdateNavBar.Response) {
            presentNavBarDataCalled = true
        }
        func presentNoDataText(_ response: UsersList.SetText.Response) {
            presentNoDataTextCalled = true
        }
        func presentFetchedUsers(_ response: UsersList.FetchUsers.Response) {
            presentFetchedUsersCalled = true
        }
        
    }
    
    class UsersListWorkingLogicSpy: UsersListWorkingLogic {
        var isFailure = false
        var error = Seeds.Errors.ErrorTest(
            title: "errorTest",
            code: 0)
        
        var presentFetchedUsersCalled = false
        
        func fetchUsers(completion: @escaping (Result<[User]>) -> Void) {
            presentFetchedUsersCalled = true
            if isFailure {
                completion(.failure(error))
            } else {
                var data: [User] = []
                data.append(Seeds.Users.userTest)
                completion(.success(data))
            }
        }
    }
    
    // MARK: Tests
    
    func testGetNavBarData() {
        // Given
        let spy = UsersListPresentationLogicSpy()
        sut.presenter = spy
        let request = UsersList.UpdateNavBar.Request()
        
        // When
        sut.getNavBarData(request)
        
        // Then
        XCTAssertTrue(spy.presentNavBarDataCalled, "getNavBarData(request:) should ask the presenter to format the result")
    }
    
    func testGetNoDataText() {
        // Given
        let spy = UsersListPresentationLogicSpy()
        sut.presenter = spy
        let request = UsersList.SetText.Request()
        
        // When
        sut.getNoDataText(request)
        
        // Then
        XCTAssertTrue(spy.presentNoDataTextCalled, "getNoDataText(request:) should ask the presenter to format the result")
    }
    
    func testFetchUsers() {
        // Given
        let spy = UsersListPresentationLogicSpy()
        sut.presenter = spy
        let request = UsersList.FetchUsers.Request()
        let workerSpy = UsersListWorkingLogicSpy()
        workerSpy.isFailure = true
        sut.worker = workerSpy
        
        // When
        sut.fetchUsers(request)
        
        // Then
        XCTAssert(spy.presentFetchedUsersCalled, "fetchUsers(request:) should ask the presenter to format the result")

    }
    
    func testSelectUser() {
        // Given
        let spy = UsersListPresentationLogicSpy()
        sut.presenter = spy
        sut.userList.append(Seeds.Users.userTest)
        let request = UsersList.SelectUser.Request(index: 0)
        
        // When
        sut.selectUser(request)
        
        // Then
        XCTAssertEqual(sut.selectedUser?.id, sut.userList[0].id, "selectUser(request:) should set selectedUser")

    }
}
