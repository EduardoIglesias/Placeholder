//
//  UserDetailViewControllerTests.swift
//  Placeholder
//
//  Created by Eduardo Iglesias Fern√°ndez on 13/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Placeholder
import XCTest

class UserDetailViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: UserDetailViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupUserDetailViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupUserDetailViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: Constants.Storyboards.UserDetail , bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: Constants.ViewControllers.UserDetail) as? UserDetailViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class UserDetailBusinessLogicSpy: UserDetailBusinessLogic
  {
    var getNavBarDataCalled = false
    var getViewFieldsCalled = false
    var getUserInfoCalled = false
    
    func getNavBarData(_ request: UserDetail.UpdateNavBar.Request)  {
         getNavBarDataCalled = true
       }
    func getViewFields(_ request: UserDetail.SetViewFields.Request)  {
         getViewFieldsCalled = true
       }
    func getUserInfo(_ request: UserDetail.SetUserInfo.Request)  {
         getUserInfoCalled = true
       }

  }
  
  // MARK: Tests
  
  func testShouldDoSomethingWhenViewIsLoaded()
  {
    // Given
    let spy = UserDetailBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertEqual(sut.usernameTitle.textColor, UIColor.darkgrey, "usernameTitle textColor should be darkgrey")
    XCTAssertEqual(sut.emailTitle.textColor, UIColor.darkgrey, "emailTitle textColor should be darkgrey")
    XCTAssertEqual(sut.addressTitle.textColor, UIColor.darkgrey, "addressTitle textColor should be darkgrey")
    XCTAssertEqual(sut.phoneTitle.textColor, UIColor.darkgrey, "phoneTitle textColor should be darkgrey")
    XCTAssertEqual(sut.websiteTitle.textColor, UIColor.darkgrey, "websiteTitle textColor should be darkgrey")
    XCTAssertEqual(sut.companyTitle.textColor, UIColor.darkgrey, "companyTitle textColor should be darkgrey")
    
  }
  
  func testDisplayNavBarData() {
    // Given
    let viewModel = UserDetail.UpdateNavBar.ViewModel(navData: Seeds.NavBarDatas.navBarDataTest)
    
    // When
    loadView()
    sut.displayNavBarData(viewModel)
    
    // Then
    XCTAssertEqual(sut.customNV.titleLabel.text, "TitleTest", "displayNavBarData(viewModel:) should update the titleLabel text in nav bar")
    XCTAssertEqual(sut.customNV.backTitleLabel.text, "backTest", "displayNavBarData(viewModel:) should update the name text in nav bar")
    XCTAssertEqual(sut.customNV.iconImage.image, UIImage(named: Constants.ImageNames.UserIcon), "displayNavBarData(viewModel:) should update the iconImage image in nav bar")
    XCTAssertEqual(sut.customNV.rightButton.imageView?.image, UIImage(named: Constants.ImageNames.CloseIcon), "displayNavBarData(viewModel:) should update the rightButton image in nav bar")
  }
    
    func testDisplayViewFields() {
      // Given
        let viewModel = UserDetail.SetViewFields.ViewModel(viewFields: Seeds.UserFierldsStructs.UserFieldTest)
      
      // When
      loadView()
      sut.displayViewFields(viewModel)
      
      // Then
        XCTAssertEqual(sut.usernameTitle.text, "usernameTitleTest", "displayViewFields(viewModel:) should update the usernameTitle text in user detail view")
        XCTAssertEqual(sut.emailTitle.text, "emailTitleTest", "displayNavBarData(viewModel:) should update the emailTitle text in user detail view")
        XCTAssertEqual(sut.addressTitle.text, "addressTitleTest", "displayNavBarData(viewModel:) should update the addressTitle text in user detail view")
        XCTAssertEqual(sut.phoneTitle.text, "phoneTitleTest", "displayViewFields(viewModel:) should update the phoneTitle text in user detail view")
        XCTAssertEqual(sut.websiteTitle.text, "websiteTitleTest", "displayNavBarData(viewModel:) should update the websiteTitle text in user detail view")
        XCTAssertEqual(sut.companyTitle.text, "companyTitleTest", "displayNavBarData(viewModel:) should update the companyTitle text in user detail view")
    }
    
    func testDisplayUserInfo() {
      // Given
        let viewModel = UserDetail.SetUserInfo.ViewModel(userInfo: Seeds.Users.userFormmatedTest)
      
      // When
      loadView()
      sut.displayUserInfo(viewModel)
      
      // Then
        XCTAssertEqual(sut.username.text, "usernameTest", "displayViewFields(viewModel:) should update the username text in user detail view")
        XCTAssertEqual(sut.email.text, "emailTest", "displayNavBarData(viewModel:) should update the email text in user detail view")
        XCTAssertEqual(sut.address.text, "addressTest", "displayNavBarData(viewModel:) should update the address text in user detail view")
        XCTAssertEqual(sut.phone.text, "phoneTest", "displayViewFields(viewModel:) should update the phone text in user detail view")
        XCTAssertEqual(sut.website.text, "websiteTest", "displayNavBarData(viewModel:) should update the website text in user detail view")
        XCTAssertEqual(sut.company.text, "companyNameTest", "displayNavBarData(viewModel:) should update the company text in user detail view")
    }
}
