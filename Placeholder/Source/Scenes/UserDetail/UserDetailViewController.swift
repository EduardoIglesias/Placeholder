//
//  UserDetailViewController.swift
//  Placeholder
//
//  Created by Eduardo Iglesias Fern√°ndez on 09/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol UserDetailDisplayLogic: class {
    func displayNavBarData(_ viewModel: UserDetail.UpdateNavBar.ViewModel)
    func displayViewFields(_ viewModel: UserDetail.SetViewFields.ViewModel)
    func displayUserInfo(_ viewModel: UserDetail.SetUserInfo.ViewModel)
}

class UserDetailViewController: UIViewController {
  var interactor: UserDetailBusinessLogic?
  var router: (NSObjectProtocol & UserDetailRoutingLogic & UserDetailDataPassing)?

    // MARK: - Outlets
    
    @IBOutlet weak var customNV: CustomNavigationBar!
    @IBOutlet weak var usernameTitle: UILabel!
    @IBOutlet weak var username: UILabel!
    @IBOutlet weak var emailTitle: UILabel!
    @IBOutlet weak var email: UILabel!
    @IBOutlet weak var addressTitle: UILabel!
    @IBOutlet weak var address: UILabel!
    @IBOutlet weak var phoneTitle: UILabel!
    @IBOutlet weak var phone: UILabel!
    @IBOutlet weak var websiteTitle: UILabel!
    @IBOutlet weak var website: UILabel!
    @IBOutlet weak var companyTitle: UILabel!
    @IBOutlet weak var company: UILabel!
    @IBOutlet weak var todosAccessButton: UIButton!
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setupScene()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setupScene()
  }
  
  // MARK: Setup
  
    private func setupScene() {
        let viewController = self
        let interactor = UserDetailInteractor()
        let presenter = UserDetailPresenter()
        let router = UserDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    func setupView() {
        customNV.delegate = self
        applyStyle()
    }
    
    // MARK: Private methods
    
    fileprivate func applyStyle() {
        usernameTitle.textColor = UIColor.darkgrey
        emailTitle.textColor = UIColor.darkgrey
        addressTitle.textColor = UIColor.darkgrey
        phoneTitle.textColor = UIColor.darkgrey
        websiteTitle.textColor = UIColor.darkgrey
        companyTitle.textColor = UIColor.darkgrey
    }
  
  // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        updateNavBar()
        setView()
        setUserInfo()
    }
    
    @IBAction func todosAccessTouchUpInside(_ sender: Any) {
        router?.routeToTodosList()
    }
    // MARK: - Requests
  
    private func updateNavBar() {
        let request = UserDetail.UpdateNavBar.Request()
        interactor?.getNavBarData(request)
    }
  
    private func setView() {
        let request = UserDetail.SetViewFields.Request()
        interactor?.getViewFields(request)
    }
    
    private func setUserInfo() {
        let request = UserDetail.SetUserInfo.Request()
        interactor?.getUserInfo(request)
    }
}

    // MARK: - UsersListDisplayLogic

extension UserDetailViewController: UserDetailDisplayLogic {
    
    func displayNavBarData(_ viewModel: UserDetail.UpdateNavBar.ViewModel) {
        customNV.updateUI(data: viewModel.navData)
    }
    
    func displayViewFields(_ viewModel: UserDetail.SetViewFields.ViewModel) {
        usernameTitle.text = viewModel.viewFields.usernameTitle
        emailTitle.text = viewModel.viewFields.emailTitle
        addressTitle.text = viewModel.viewFields.addressTitle
        phoneTitle.text = viewModel.viewFields.phoneTitle
        websiteTitle.text = viewModel.viewFields.websiteTitle
        companyTitle.text = viewModel.viewFields.companyTitle
        todosAccessButton.setTitle(viewModel.viewFields.todosAccessButtonText, for: .normal)
    }
    
    func displayUserInfo(_ viewModel: UserDetail.SetUserInfo.ViewModel) {
        username.text = viewModel.userInfo.username
        email.text = viewModel.userInfo.email
        address.text = viewModel.userInfo.address
        phone.text = viewModel.userInfo.phone
        website.text = viewModel.userInfo.website
        company.text = viewModel.userInfo.companyName
        
    }
}
 
// MARK: - Delegates

extension UserDetailViewController: CustomNavigationBarDelegate {
    func backButtonAction() {
        self.dismiss(animated: true)
    }
}
