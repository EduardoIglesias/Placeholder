//
//  UserDetailInteractor.swift
//  Placeholder
//
//  Created by Eduardo Iglesias Fern√°ndez on 09/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UserDetailBusinessLogic {
    func getNavBarData(_ request: UserDetail.UpdateNavBar.Request)
    func getViewFields(_ request: UserDetail.SetViewFields.Request)
    func getUserInfo(_ request: UserDetail.SetUserInfo.Request)
}

protocol UserDetailDataStore {
  var selectedUser: User? { get set }
}

class UserDetailInteractor: UserDetailBusinessLogic, UserDetailDataStore {
    var presenter: UserDetailPresentationLogic?
    var selectedUser: User?
  
  // MARK: - UserDetailBusinessLogic
  
    func getNavBarData(_ request: UserDetail.UpdateNavBar.Request) {
        let response = UserDetail.UpdateNavBar.Response(
            navData: NavigationBarData(
                title: selectedUser?.name ?? "user.detail.scene.title".localized,
                backTitle: "back.button.cancel".localized,
                iconImage: UIImage(named: Constants.ImageNames.DetailIcon),
                rightButtonImage: nil))
        
        self.presenter?.presentNavBarData(response)
    }
    
    func getViewFields(_ request: UserDetail.SetViewFields.Request) {
        let viewFields = UserFields(
           usernameTitle: "user.detail.scene.username".localized,
           emailTitle: "user.detail.scene.email".localized,
           addressTitle: "user.detail.scene.address".localized,
           phoneTitle: "user.detail.scene.phone".localized,
           websiteTitle: "user.detail.scene.website".localized,
           companyTitle: "user.detail.scene.company".localized)
        let response = UserDetail.SetViewFields.Response(viewFields: viewFields)
        self.presenter?.presentViewFields(response)
    }
    
    func getUserInfo(_ request: UserDetail.SetUserInfo.Request) {
        let noInfoUser = User(id: 0, name: "", username: "", email: "", address: Address(street: "", suite: "", city: "", zipcode: "", geo: Geo(lat: "", lng: "")), phone: "", website: "", company: Company(name: "", catchPhrase: "", bs: ""))
        let response = UserDetail.SetUserInfo.Response(
            userInfo: selectedUser ?? noInfoUser)
        self.presenter?.presentUserInfo(response)
    }
}
