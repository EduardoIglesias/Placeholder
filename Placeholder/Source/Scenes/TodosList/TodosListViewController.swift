//
//  TodosListViewController.swift
//  Placeholder
//
//  Created by Eduardo Iglesias FernÃ¡ndez on 10/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TodosListDisplayLogic: class {
    func displayNavBarData(_ viewModel: TodosList.UpdateNavBar.ViewModel)
    func displayNoDataText(_ viewModel: TodosList.SetText.ViewModel)
    func displayFetchedTodos(_ viewModel: TodosList.FetchTodos.ViewModel)
    func displayCreatePopup(_ viewModel: TodosList.LaunchCreatePopup.ViewModel)
    func displayCreateTodo(_ viewModel: TodosList.CreateTodo.ViewModel)
    func displayDeletePopup(_ viewModel: TodosList.LaunchDeletePopup.ViewModel)
    func displayDeleteTodo(_ viewModel: TodosList.DeleteTodo.ViewModel)
    func displayUpdatePopup(_ viewModel: TodosList.LaunchUpdatePopup.ViewModel)
    func displayUpdateTodo(_ viewModel: TodosList.UpdateTodo.ViewModel)
    func displayCheckPopup(_ viewModel: TodosList.LaunchCheckPopup.ViewModel)
    func displayCheckTodo(_ viewModel: TodosList.CheckTodo.ViewModel)
}

class TodosListViewController: UIViewController {
    var interactor: TodosListBusinessLogic?
    var router: (NSObjectProtocol & TodosListRoutingLogic & TodosListDataPassing)?
    var todoList: [Todo] = []
    var newTodoText: String = ""
    var todoIndex: Int = 0
    
    private var viewModel: TodosList.FetchTodos.ViewModel?
    
    // MARK: - Outlets
    
    @IBOutlet weak var customNV: CustomNavigationBar!
    @IBOutlet weak var activitiIndicator: UIActivityIndicatorView!
    @IBOutlet weak var todosTableView: UITableView!
    @IBOutlet weak var noTodosLabel: UILabel!
    @IBOutlet weak var createTodoButton: UIImageView!
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupScene()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupScene()
    }
    
    // MARK: - Setup
    
    private func setupScene() {
        let viewController = self
        let interactor = TodosListInteractor()
        let presenter = TodosListPresenter()
        let router = TodosListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    func setupView() {
        todosTableView.register(TodosListTableViewCell.self )
        todosTableView.delegate = self
        todosTableView.dataSource = self
        customNV.delegate = self
        
        let tapGesture: UITapGestureRecognizer = UITapGestureRecognizer()
        tapGesture.addTarget(self, action: #selector(launchCreatePopUp))
        createTodoButton.addGestureRecognizer(tapGesture)
        createTodoButton.isUserInteractionEnabled = true
        
        applyStyle()
    }
    
    // MARK: Private methods

    fileprivate func reloadData() {
        noTodosLabel(hide: self.todoList.count > 0)
        
        todosTableView.reloadData()
        activitiIndicator.stopAnimating()
        todosTableView.isHidden = !(self.todoList.count > 0)
        createTodoButton.isHidden = !(self.todoList.count > 0)
    }
    
     fileprivate func noTodosLabel(hide: Bool) {
         noTodosLabel.isHidden = hide
     }
    
    fileprivate func applyStyle() {
        view.backgroundColor = UIColor.lightgrey
        todosTableView.tableFooterView = UIView(frame: .zero)
    }
    
    // MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        updateNavBar()
        setNoDataText()
        fetchedTodosAction()
    }
    
    @objc func launchCreatePopUp() {
       requestToLaunchCreatePopUp()
    }
    
    // MARK: - Requests
    
    private func updateNavBar() {
        let request = TodosList.UpdateNavBar.Request()
        interactor?.getNavBarData(request)
    }
    
    private func setNoDataText() {
        let request = TodosList.SetText.Request()
        interactor?.getNoDataText(request)
    }
    
    private func requestToFetchTodos() {
        let request = TodosList.FetchTodos.Request()
        interactor?.fetchTodos(request)
    }
   
    private func requestToLaunchCreatePopUp() {
      let request = TodosList.LaunchCreatePopup.Request()
      interactor?.getCreatePopUpText(request)
    }
    
    private func requestToCreateTodo(newTodo: Todo) {
        let request = TodosList.CreateTodo.Request(newTodoData: newTodo)
      interactor?.getCreateTodo(request)
    }
    
    private func requestToLaunchDeletePopUp(todoIndex: Int) {
        let request = TodosList.LaunchDeletePopup.Request(todoIndex: todoIndex)
      interactor?.getDeletePopUpText(request)
    }
    
    private func requestToDeleteTodo(todoId: Int, todoIndex: Int) {
        let request = TodosList.DeleteTodo.Request(todoId: todoId, todoIndex: todoIndex)
      interactor?.getDeleteTodo(request)
    }
    
    private func requestToLaunchUpdatePopUp(todoIndex: Int) {
        let request = TodosList.LaunchUpdatePopup.Request(todoIndex: todoIndex)
      interactor?.getUpdatePopUpText(request)
    }
    
    private func requestToUpdateTodo(todoIndex: Int, updatedTodo: Todo) {
        let request = TodosList.UpdateTodo.Request(todoIndex: todoIndex, UpdatedTodoData: updatedTodo)
      interactor?.getUpdateTodo(request)
    }
    
    private func requestToLaunchCheckPopUp(todoIndex: Int, isSelected: Bool) {
        let request = TodosList.LaunchCheckPopup.Request(todoIndex: todoIndex, checked: isSelected)
      interactor?.getCheckPopUpText(request)
    }
    
    private func requestToCheckTodo(todoId: Int, todoChecked: Bool, todoIndex: Int) {
        let request = TodosList.CheckTodo.Request(todoId: todoId, todoChecked: todoChecked, todoIndex: todoIndex)
      interactor?.getCheckTodo(request)
    }
    
    
    // MARK: - Alert
    
    func showAlert(title: String, message: String, cancelButtonText: String?, actionButtonText: String? = nil, complention: (() -> Void)? = nil) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        
        let alertCancel = UIAlertAction(title: cancelButtonText, style: .default, handler: nil)
        
        alert.addAction(alertCancel)
        
        if actionButtonText != nil {
            let alertAction = UIAlertAction(title: actionButtonText, style: .default, handler: { (_) in
                complention?()
            })
            
            if alertAction.title == "popup.button.yes".localized {
                alertAction.setValue(UIColor.red, forKey: "titleTextColor")
            }
            
        alert.addAction(alertAction)
        }
        
        
        self.present(alert, animated: true, completion: nil)
        
    }
    
    @objc func fetchedTodosAction() {
        todosTableView.isHidden = true
        noTodosLabel.isHidden = true
        createTodoButton.isHidden = true
        activitiIndicator.isHidden = false
        activitiIndicator.startAnimating()
        
        requestToFetchTodos()
    }
    
    @objc func createTodoAction() {
        let newTodo:Todo = Todo(userId: 0, id: 0, title: self.newTodoText, completed: false)
        self.requestToCreateTodo(newTodo: newTodo)
    }
    
    @objc func deleteTodoAction() {
        self.requestToDeleteTodo(todoId: todoList[self.todoIndex].id, todoIndex: self.todoIndex)
    }
    
    @objc func updateTodoAction() {
        let updatedTodo:Todo = Todo(userId: todoList[todoIndex].userId, id: todoList[todoIndex].id, title: self.newTodoText, completed: todoList[todoIndex].completed)
        self.requestToUpdateTodo(todoIndex: self.todoIndex, updatedTodo: updatedTodo)
    }
    
    @objc func checkTodoAction() {
        self.requestToCheckTodo(todoId: todoList[self.todoIndex].id, todoChecked: todoList[self.todoIndex].completed, todoIndex: self.todoIndex)
    }
    
    
    // MARK: - UsersListDisplayLogic
}
extension TodosListViewController: TodosListDisplayLogic {
    
    func displayNavBarData(_ viewModel: TodosList.UpdateNavBar.ViewModel) {
        customNV.updateUI(data: viewModel.navData)
    }
    
    func displayNoDataText(_ viewModel: TodosList.SetText.ViewModel) {
        noTodosLabel.text = viewModel.noDataText
    }
    
    func displayFetchedTodos(_ viewModel: TodosList.FetchTodos.ViewModel) {
        self.todoList = viewModel.todos
        reloadData()
        if viewModel.popupMessage != "error.message.noerror".localized {
            showAlert(title: viewModel.popupTitle, message: viewModel.popupMessage, cancelButtonText: viewModel.popupCancelText, complention: fetchedTodosAction)
        }
    }
    
    func displayCreatePopup(_ viewModel: TodosList.LaunchCreatePopup.ViewModel) {
        let alert = UIAlertController(title: viewModel.popupTitle, message: "", preferredStyle: .alert)

        alert.addTextField { (textField) in
            textField.text = ""
        }

        let alertCancel = UIAlertAction(title: viewModel.popupCancelText, style: .default, handler: nil)
        alert.addAction(alertCancel)
        
        let alertAction = UIAlertAction(title: viewModel.popupCreateText, style: .default, handler: { [weak alert] (_) in
            let textField = alert?.textFields?[0]
            self.newTodoText = textField?.text ?? ""
            self.createTodoAction()
        })
        if alertAction.title == "todos.list.scene.popup.newtodo.button.create".localized {
            alertAction.setValue(UIColor.validategreen, forKey: "titleTextColor")
        }
        alert.addAction(alertAction)


        self.present(alert, animated: true, completion: nil)
    }
    
    func displayCreateTodo(_ viewModel: TodosList.CreateTodo.ViewModel) {
        self.todoList = viewModel.todos
       
        if viewModel.popupMessage != "todos.list.scene.popup.button.createsuccess.message".localized {
            showAlert(title: viewModel.popupTitle, message: viewModel.popupMessage, cancelButtonText: viewModel.popupCancelText, actionButtonText: viewModel.popupActionText, complention: createTodoAction)
        } else {
            showAlert(title: viewModel.popupTitle, message: viewModel.popupMessage, cancelButtonText: viewModel.popupCancelText)
            reloadData()
        }
    }
    
    func displayDeletePopup(_ viewModel: TodosList.LaunchDeletePopup.ViewModel) {
        self.todoIndex = viewModel.todoIndex
        showAlert(title: viewModel.popupTitle, message: "", cancelButtonText: viewModel.popupNoText, actionButtonText: viewModel.popupYesText, complention: deleteTodoAction)
    }
    
    func displayDeleteTodo(_ viewModel: TodosList.DeleteTodo.ViewModel) {
        self.todoList = viewModel.todos
        
        if viewModel.popupMessage != "todos.list.scene.popup.button.deletesuccess.message".localized {
            showAlert(title: viewModel.popupTitle, message: viewModel.popupMessage, cancelButtonText: viewModel.popupCancelText, actionButtonText: viewModel.popupActionText, complention: deleteTodoAction)
        } else {
            showAlert(title: viewModel.popupTitle, message: viewModel.popupMessage, cancelButtonText: viewModel.popupCancelText)
            reloadData()
        }
    }
    
    func displayUpdatePopup(_ viewModel: TodosList.LaunchUpdatePopup.ViewModel) {
        let alert = UIAlertController(title: viewModel.popupTitle, message: "", preferredStyle: .alert)

        alert.addTextField { (textField) in
            textField.text = "\(self.todoList[viewModel.todoIndex].title)"
        }

        let alertCancel = UIAlertAction(title: viewModel.popupCancelText, style: .default, handler: nil)
        alert.addAction(alertCancel)
        
        let alertAction = UIAlertAction(title: viewModel.popupUpdateText, style: .default, handler: { [weak alert] (_) in
            let textField = alert?.textFields?[0]
            self.newTodoText = textField?.text ?? ""
            self.todoIndex = viewModel.todoIndex
            self.updateTodoAction()
        })
        if alertAction.title == "todos.list.scene.popup.newtodo.button.create".localized || alertAction.title == "todos.list.scene.popup.updatetodo.button.update".localized {
            alertAction.setValue(UIColor.validategreen, forKey: "titleTextColor")
        }
        alert.addAction(alertAction)


        self.present(alert, animated: true, completion: nil)
    }
    
    func displayUpdateTodo(_ viewModel: TodosList.UpdateTodo.ViewModel) {
        self.todoList = viewModel.todos
        
        if viewModel.popupMessage != "todos.list.scene.popup.button.updatesuccess.message".localized {
            showAlert(title: viewModel.popupTitle, message: viewModel.popupMessage, cancelButtonText: viewModel.popupCancelText, actionButtonText: viewModel.popupActionText, complention: updateTodoAction)
        } else {
            showAlert(title: viewModel.popupTitle, message: viewModel.popupMessage, cancelButtonText: viewModel.popupCancelText)
            reloadData()
        }
    }
    
    func displayCheckPopup(_ viewModel: TodosList.LaunchCheckPopup.ViewModel) {
        self.todoIndex = viewModel.todoIndex
        showAlert(title: viewModel.popupTitle, message: "", cancelButtonText: viewModel.popupNoText, actionButtonText: viewModel.popupYesText, complention: checkTodoAction)
    }
    
    func displayCheckTodo(_ viewModel: TodosList.CheckTodo.ViewModel) {
        self.todoList = viewModel.todos
        
        if viewModel.popupMessage != "todos.list.scene.popup.button.checkedsuccess.message".localized &&
           viewModel.popupMessage != "todos.list.scene.popup.button.uncheckedsuccess.message".localized {
            showAlert(title: viewModel.popupTitle, message: viewModel.popupMessage, cancelButtonText: viewModel.popupCancelText, actionButtonText: viewModel.popupActionText, complention: checkTodoAction)
        } else {
            showAlert(title: viewModel.popupTitle, message: viewModel.popupMessage, cancelButtonText: viewModel.popupCancelText)
            reloadData()
        }
    }
    
}


// MARK: - Delegates

extension TodosListViewController: CustomNavigationBarDelegate {
        func backButtonAction() {
        self.dismiss(animated: true)
    }
    
        func rightButtonAction() {
            self.view.window?.rootViewController?.dismiss(animated: true, completion: nil)
            
    }
    
}

extension TodosListViewController: UITableViewDelegate, UITableViewDataSource {

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return Constants.CellIHeights.TodosList
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.todoList.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let todo = self.todoList[indexPath.row]
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: TodosListTableViewCell.cellIdentifier) as? TodosListTableViewCell else {
            return UITableViewCell()
        }

        cell.selectionStyle = .none
        
        cell.checkboxButton.addTarget(self, action: #selector(checkboxButtonClicked(sender:)), for: .touchUpInside)
        cell.deleteButton.addTarget(self, action: #selector(deleteButtonClicked(sender:)), for: .touchUpInside)

        cell.updateUI(index: indexPath.row, item: todo)
        
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: false)
        requestToLaunchUpdatePopUp(todoIndex: indexPath.row)
        
    }
    
    @objc func deleteButtonClicked (sender: UIButton) {
        requestToLaunchDeletePopUp(todoIndex: sender.tag)
    }
    
    @objc func checkboxButtonClicked (sender: UIButton) {
        requestToLaunchCheckPopUp(todoIndex: sender.tag, isSelected: sender.isSelected)
    }

}
