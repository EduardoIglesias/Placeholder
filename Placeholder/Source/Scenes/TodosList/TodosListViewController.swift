//
//  TodosListViewController.swift
//  Placeholder
//
//  Created by Eduardo Iglesias FernÃ¡ndez on 10/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TodosListDisplayLogic: class {
    func displayNavBarData(_ viewModel: TodosList.UpdateNavBar.ViewModel)
    func displayNoDataText(_ viewModel: TodosList.SetText.ViewModel)
    func displayFetchedTodos(_ viewModel: TodosList.FetchTodos.ViewModel)
}

class TodosListViewController: UIViewController {
    var interactor: TodosListBusinessLogic?
    var router: (NSObjectProtocol & TodosListRoutingLogic & TodosListDataPassing)?
    var todoList: [Todo] = []
    
    private var viewModel: TodosList.FetchTodos.ViewModel?
    
    // MARK: - Outlets
    
    @IBOutlet weak var customNV: CustomNavigationBar!
    @IBOutlet weak var activitiIndicator: UIActivityIndicatorView!
    @IBOutlet weak var todosTableView: UITableView!
    @IBOutlet weak var noTodosLabel: UILabel!
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupScene()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupScene()
    }
    
    // MARK: - Setup
    
    private func setupScene() {
        let viewController = self
        let interactor = TodosListInteractor()
        let presenter = TodosListPresenter()
        let router = TodosListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    func setupView() {
        todosTableView.delegate = self
        todosTableView.dataSource = self
        customNV.delegate = self
        
        todosTableView.isHidden = true
        noTodosLabel.isHidden = true
        applyStyle()
    }
    
    // MARK: Private methods

    fileprivate func reloadData() {
        noTodosLabel(hide: self.todoList.count > 0)
        
        todosTableView.reloadData()
        activitiIndicator.stopAnimating()
        todosTableView.isHidden = !(self.todoList.count > 0)
    }
    
     fileprivate func noTodosLabel(hide: Bool) {
         noTodosLabel.isHidden = hide
     }
    
    fileprivate func applyStyle() {
        view.backgroundColor = UIColor.lightgrey
        todosTableView.tableFooterView = UIView(frame: .zero)
    }
    
    // MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        updateNavBar()
        setNoDataText()
        requestToFetchTodos()
    }
    
    // MARK: - Requests
    
    private func updateNavBar() {
        let request = TodosList.UpdateNavBar.Request()
        interactor?.getNavBarData(request)
    }
    
    private func setNoDataText() {
        let request = TodosList.SetText.Request()
        interactor?.getNoDataText(request)
    }
    
    private func requestToFetchTodos() {
        let request = TodosList.FetchTodos.Request()
        interactor?.fetchTodos(request)
    }
    
    private func requestToSelectTodo(by indexPath: IndexPath) {
      let request = TodosList.SelectTodo.Request(index: indexPath.row)
      interactor?.selectTodo(request)
    }
    
    // MARK: - Alert
    
    func showAlert(title: String, message: String, cancelButtonText: String?) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        
        let alertCancel = UIAlertAction(title: cancelButtonText, style: .default, handler: nil)
        alert.addAction(alertCancel)
        
        self.present(alert, animated: true, completion: nil)
        
    }
    
    // MARK: - UsersListDisplayLogic
}
extension TodosListViewController: TodosListDisplayLogic {
    
    func displayNavBarData(_ viewModel: TodosList.UpdateNavBar.ViewModel) {
        customNV.updateUI(data: viewModel.navData)
    }
    
    func displayNoDataText(_ viewModel: TodosList.SetText.ViewModel) {
        noTodosLabel.text = viewModel.noDataText
    }
    
    func displayFetchedTodos(_ viewModel: TodosList.FetchTodos.ViewModel) {
        self.todoList = viewModel.todos
        reloadData()
        if viewModel.error != "error.message.noerror".localized {
            showAlert(title: "error.title".localized, message: "todos.list.scene.error.error.message".localized, cancelButtonText: "error.button.cancel".localized)
        }
    }
}


// MARK: - Delegates

extension TodosListViewController: CustomNavigationBarDelegate {
        func backButtonAction() {
        self.dismiss(animated: true)
    }
    
        func rightButtonAction() {
            self.view.window?.rootViewController?.dismiss(animated: true, completion: nil)
            
    }
    
}

extension TodosListViewController: UITableViewDelegate, UITableViewDataSource {

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return Constants.CellIHeights.UsersList
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.todoList.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let todo = self.todoList[indexPath.row]
        
        let cell: UITableViewCell = {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: Constants.CellIdentifiers.UsersList) else {
                return UITableViewCell(style: UITableViewCell.CellStyle.subtitle, reuseIdentifier: Constants.CellIdentifiers.UsersList)
            }
            return cell
        }()
        
        cell.textLabel?.text = todo.title
        
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: false)
        requestToSelectTodo(by: indexPath)
    }
}
