//
//  TodosListWorker.swift
//  Placeholder
//
//  Created by Eduardo Iglesias Fern√°ndez on 10/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol TodosListWorkingLogic {
    func fetchTodos(for userId: String, completion: @escaping (Result<[Todo]>) -> Void)
    func createNewTodo(newTodo: Todo, completion: @escaping (Result<Todo>) -> Void)
}

final class TodosListWorker: TodosListWorkingLogic {
    
    // MARK: - Private Properties
    private let networkWorker: NetworkWorkingLogic = NetworkWorker()
    private func todosURL(for userId : String) -> URL { return getUrl(for: "\(Constants.URL.Users)\(Constants.URL.ExtraSlash)\(userId)\(Constants.URL.Todos)")}
    private func allTodosURL() -> URL { return getUrl(for: Constants.URL.Todos)}
          
    
    // MARK: - UsersListWorkingLogic
    
    func fetchTodos(for userId: String, completion: @escaping (Result<[Todo]>) -> Void) {
        let url = todosURL(for: userId)
        let requestUrl = url
        var request = URLRequest(url: requestUrl)
        request.httpMethod = Constants.HTTPMethod.GET
        
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        request.setValue("application/json; charset=UTF-8", forHTTPHeaderField: "Content-Type")
        networkWorker.request(for: request, completion: completion)
        
    }
    
    func createNewTodo(newTodo: Todo, completion: @escaping (Result<Todo>) -> Void) {
        let url = allTodosURL()
        let requestUrl = url
        var request = URLRequest(url: requestUrl)
        request.httpMethod = Constants.HTTPMethod.POST
        
       let newTodo: [String:Any] = ["title":"My First todo","completed":false,"userId":1]
        let jsonTodo: Data
        do{
            jsonTodo = try JSONSerialization.data(withJSONObject: newTodo, options: [])
            
        } catch {
            print("Error: cannot create JSON from todo")
            return
            
        }
        request.httpBody = jsonTodo

        request.setValue("application/json", forHTTPHeaderField: "Accept")
        request.setValue("application/json; charset=UTF-8", forHTTPHeaderField: "Content-Type")
        networkWorker.request(for: request, completion: completion)
        
    }
}
