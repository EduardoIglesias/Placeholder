//
//  TodosListWorker.swift
//  Placeholder
//
//  Created by Eduardo Iglesias Fern√°ndez on 10/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol TodosListWorkingLogic {
    func fetchTodos(for userId: String, completion: @escaping (Result<[Todo]>) -> Void)
    func createTodo(newTodo: Todo, completion: @escaping (Result<Todo>) -> Void)
    func deleteTodo(todoId: String, completion: @escaping (Result<DeletedTodo>) -> Void)
    func updateTodo(updatedTodo: Todo, completion: @escaping (Result<Todo>) -> Void)
    func checkTodo(todoId: String, checked: Bool, completion: @escaping (Result<Todo>) -> Void)
}

final class TodosListWorker: TodosListWorkingLogic {
    
    // MARK: - Private Properties
    private let networkWorker: NetworkWorkingLogic = NetworkWorker()
    
    private func todosURL(for userId : String) -> URL { return getUrl(for: "\(Constants.URL.Users)\(Constants.URL.ExtraSlash)\(userId)\(Constants.URL.Todos)")}
    private func allTodosURL() -> URL { return getUrl(for: Constants.URL.Todos)}
    private func todoURL(for userId : String) -> URL { return getUrl(for: "\(Constants.URL.Todos)\(Constants.URL.ExtraSlash)\(userId)")}
          
    
    // MARK: - UsersListWorkingLogic
    
    func fetchTodos(for userId: String, completion: @escaping (Result<[Todo]>) -> Void) {
        let url = todosURL(for: userId)
        let requestUrl = url
        var request = URLRequest(url: requestUrl)
        request.httpMethod = Constants.HTTPMethod.GET
        
        request.setValue(Constants.TodoHeaderFields.typeValue, forHTTPHeaderField: Constants.TodoHeaderFields.typeField)
        networkWorker.request(for: request, completion: completion)
        
    }
    
    func createTodo(newTodo: Todo, completion: @escaping (Result<Todo>) -> Void) {
        let url = allTodosURL()
        let requestUrl = url
        var request = URLRequest(url: requestUrl)
        request.httpMethod = Constants.HTTPMethod.POST
        
        let newTodo: NewTodo = NewTodo(userId: newTodo.userId, title: newTodo.title, completed: false)
        do {
            let jsonData = try JSONEncoder().encode(newTodo)
            request.httpBody = jsonData
        } catch {
            print("*** Error: cannot create JSON from todo")
            return
        }
        
        request.setValue(Constants.TodoHeaderFields.typeValue, forHTTPHeaderField: Constants.TodoHeaderFields.typeField)
        networkWorker.request(for: request, completion: completion)
        
    }
    
    func deleteTodo(todoId: String, completion: @escaping ((Result<DeletedTodo>) -> Void)) {
        let url = todoURL(for: todoId)
        let requestUrl = url
        var request = URLRequest(url: requestUrl)
        request.httpMethod = Constants.HTTPMethod.DELETE
        
        networkWorker.request(for: request, completion: completion)
        
    }
    
    func updateTodo(updatedTodo: Todo, completion: @escaping (Result<Todo>) -> Void) {
        let url = todoURL(for: String(updatedTodo.id))
        let requestUrl = url
        var request = URLRequest(url: requestUrl)
        request.httpMethod = Constants.HTTPMethod.PUT
        
        do {
            let jsonData = try JSONEncoder().encode(updatedTodo)
            request.httpBody = jsonData
        } catch {
            print("*** Error: cannot create JSON from todo")
            return
        }
        
        request.setValue(Constants.TodoHeaderFields.typeValue, forHTTPHeaderField: Constants.TodoHeaderFields.typeField)
        networkWorker.request(for: request, completion: completion)
        
    }
    
    func checkTodo(todoId: String, checked: Bool, completion: @escaping (Result<Todo>) -> Void) {
        let url = todoURL(for: todoId)
        let requestUrl = url
        var request = URLRequest(url: requestUrl)
        request.httpMethod = Constants.HTTPMethod.PATCH
        
        let checkTodo: CheckedTodo = CheckedTodo(completed: !checked)
        do {
            let jsonData = try JSONEncoder().encode(checkTodo)
            request.httpBody = jsonData
        } catch {
            print("*** Error: cannot create JSON from todo")
            return
        }
        
        request.setValue(Constants.TodoHeaderFields.typeValue, forHTTPHeaderField: Constants.TodoHeaderFields.typeField)
        networkWorker.request(for: request, completion: completion)
        
    }
}
