//
//  UsersListViewController.swift
//  Placeholder
//
//  Created by Eduardo Iglesias FernÃ¡ndez on 07/06/2020.
//  Copyright (c) 2020 Rindus. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UsersListDisplayLogic: class {
    func displayNavBarData(_ viewModel: UsersList.UpdateNavBar.ViewModel)
    func displayNoDataText(_ viewModel: UsersList.SetText.ViewModel)
    func displayFetchedUsers(_ viewModel: UsersList.FetchUsers.ViewModel)
}

class UsersListViewController: UIViewController {
    var interactor: UsersListBusinessLogic?
    var router: (NSObjectProtocol & UsersListRoutingLogic & UsersListDataPassing)?
    var userList: [User] = []
    
    private var viewModel: UsersList.FetchUsers.ViewModel?
    
    // MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupScene()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupScene()
    }
    
    // MARK: - Setup
    
    private func setupScene() {
        let viewController = self
        let interactor = UsersListInteractor()
        let presenter = UsersListPresenter()
        let router = UsersListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
    }
    
    func setupView() {
        usersTableView.delegate = self
        usersTableView.dataSource = self
        customNV.delegate = self
        
        usersTableView.isHidden = true
        noUsersLabel.isHidden = true
        applyStyle()
    }
    
    // MARK: Private methods

    fileprivate func reloadData() {
        noUsersLabel(hide: self.userList.count > 0)
        
        usersTableView.reloadData()
        activitiIndicator.stopAnimating()
        usersTableView.isHidden = !(self.userList.count > 0)
    }
    
     fileprivate func noUsersLabel(hide: Bool) {
         noUsersLabel.isHidden = hide
     }
    
    fileprivate func applyStyle() {
        view.backgroundColor = UIColor.lightgrey
        usersTableView.tableFooterView = UIView(frame: .zero)
    }
    
    // MARK: View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        updateNavBar()
        setNoDataText()
        requestToFetchUsers()
    }
    
    // MARK: - Outlets
    
    @IBOutlet weak var customNV: CustomNavigationBar!
    @IBOutlet weak var activitiIndicator: UIActivityIndicatorView!
    @IBOutlet weak var usersTableView: UITableView!
    @IBOutlet weak var noUsersLabel: UILabel!
    
    // MARK: - Requests
    private func updateNavBar() {
        let request = UsersList.UpdateNavBar.Request()
        interactor?.getNavBarData(request)
    }
    
    private func setNoDataText() {
        let request = UsersList.SetText.Request()
        interactor?.getNoDataText(request)
    }
    
    private func requestToFetchUsers() {
        let request = UsersList.FetchUsers.Request()
        interactor?.fetchUsers(request)
    }
    
    func showAlert(title: String, message: String, cancelButtonText: String?) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        
        let alertCancel = UIAlertAction(title: cancelButtonText, style: .default, handler: nil)
        alert.addAction(alertCancel)
        
        self.present(alert, animated: true, completion: nil)
        
    }
    
    // MARK: - UsersListDisplayLogic
}
extension UsersListViewController: UsersListDisplayLogic {
    
    func displayNavBarData(_ viewModel: UsersList.UpdateNavBar.ViewModel) {
        customNV.updateUI(data: viewModel.navData, isModal: true)
    }
    
    func displayNoDataText(_ viewModel: UsersList.SetText.ViewModel) {
        noUsersLabel.text = viewModel.noDataText
    }
    
    func displayFetchedUsers(_ viewModel: UsersList.FetchUsers.ViewModel) {
        self.userList = viewModel.users
        reloadData()
        if viewModel.error != "error.message.noerror".localized {
            showAlert(title: "error.title".localized, message: "users.list.scene.error.error.message".localized, cancelButtonText: "error.button.cancel".localized)
        }
    }
}


// MARK: - Delegates

extension UsersListViewController: CustomNavigationBarDelegate {
    func backButtonAction() {}
}

extension UsersListViewController: UITableViewDelegate, UITableViewDataSource {

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return Constants.CellIHeights.UsersList
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.userList.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let user = self.userList[indexPath.row]
        
        let cell: UITableViewCell = {
            guard let cell = tableView.dequeueReusableCell(withIdentifier: Constants.CellIdentifiers.UsersList) else {
                return UITableViewCell(style: UITableViewCell.CellStyle.subtitle, reuseIdentifier: Constants.CellIdentifiers.UsersList)
            }
            return cell
        }()
        
        cell.textLabel?.text = user.name
        cell.detailTextLabel?.text = user.username
        
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: false)
//        presenter?.didSelectRowAt(indexPath.row)
    }
}
